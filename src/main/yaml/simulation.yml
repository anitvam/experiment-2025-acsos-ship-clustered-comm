incarnation: collektive

environment:
  type: NavigationEnvironment
  parameters:
    - ["maps/north_germany_coastline.geojson"]
 #   - ["maps/north_germany_waterways.geojson", "maps/north_germany_waterways3.geojson"]

variables:
  simHours:
    formula: 6
  sim-duration: &sim-duration
    formula: simHours * 3600
  start-time: &start-time
    1660795200 # Thursday, August 18, 2022 4:00:00 AM -> Thursday, August 18, 2022 6:00:00 AM GMT+02:00 DST
  one-minute-hz: &one-minute-hz
    formula: 1 / 60
  update-frequency: &update-frequency
    type: ArbitraryVariable
    parameters: [0.2, [*one-minute-hz, 0.1, 0.2]]
  5g-probability: &5g-probability
    type: ArbitraryVariable
    parameters: [0.02, [0, 0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1]]
#  5g-probability: &5g-probability
#    default: 0.01
#    min: 0.0
#    max: 1.0
#    step: 0.1
  payload-size: &payload-size # in Mbps
    type: ArbitraryVariable
    parameters: [3, [0.001, 0.064, 0.1, 0.320, 3, 5]]
  seed: &seed
    min: 0
    max: 3
    step: 1
    default: 0

network-model:
  type: ConnectWithinDistance
  parameters: [10000]

_pool: &program
  - time-distribution: *update-frequency
    program:
      name: "ShipComm"
      code: |
        import it.unibo.clustered.seaborn.comm.*
      entrypoint: |
        entrypoint(device)

_pools:
  - pool: &move
      - time-distribution: 0.1
        type: Event
        actions:
          - type: ReproduceGPSTrace
            parameters:
              path: "navigation-routes"
              cycle: false
              normalizer: "AlignToTime"
              normalizerArgs: [*start-time, true, false]
      - time-distribution:
          type: Trigger
          parameters: [ 0 ]
        type: Event
        actions:
          - type: LoadIdFromTrace
            parameters: [ "navigation-routes" ]
deployments:
  - type: FromGPSTraceCustom
    parameters:
      path: "navigation-routes" # Folder containing GPS traces
      normalizer: "AlignToTime"
      normalizerArgs: [*start-time, true, false]
    programs:
      - *move
      - *program
    contents:
      - molecule: 5gProbability
        concentration: *5g-probability
      - molecule: payloadSize
        concentration: *payload-size
  - type: SpecificPositions
    parameters:
      - [ 54.26, 9.63 ] # Rendsburg, Germany
      - [ 54.36, 10.07 ] # Kiel-Suchsdorf, Germany
      - [ 54.33, 10.08 ] # Kiel-2, Germany
      - [ 54.37, 10.12 ] # Kiel, Germany
      - [ 54.39, 10.18 ] # Friedrichsort, Germany
      - [ 54.81, 11.14 ] # Island Brigge, Denmark
    programs:
      - *program
    contents:
      - molecule: station
        concentration: true
      - molecule: payloadSize
        concentration: *payload-size
  - type: SpecificPositions # Vodafone.de 5G antenna approx position taken from opensource data (cellmapper.net)
    parameters:
      - [54.465360, 10.085189] #3411
      - [54.449901, 10.006147] #5414
      - [54.433701, 9.907289] #4595
      - [54.451517, 9.839018] #1200
      - [54.423243, 10.036692] #1376
      - [54.393440, 10.171203] #5804
      - [54.371412, 10.139636] #2211793
      - [54.360053, 10.129973] #1254
      - [54.354620, 10.116552] #1442
      - [54.342499, 10.092394] #8594
      - [54.335915, 10.118521] #2211115
      - [54.333658, 10.144607] #2213317
      - [54.320849, 10.107905] #2212398
      - [54.315291, 10.127834] #2055
      - [54.311135, 10.127193] #11655
      - [54.305976, 10.117297] #5790
      - [54.316873, 10.144532] #5612
      - [54.317879, 10.154619] #2210967
      - [54.322164, 10.166006] #2209985
      - [54.368318, 10.224928] #2209534
      - [54.473953, 9.835990] #2212896
      - [54.494095, 9.860919] #1226
      - [54.582523, 10.016081] #2210141
    programs:
      - *program
    contents:
      - molecule: 5gAntenna
        concentration: true
      - molecule: payloadSize
        concentration: *payload-size

terminate:
  type: AfterTime
  parameters: *sim-duration

launcher:
  parameters:
    batch: [seed, update-frequency, 5g-probability]
    showProgress: true
    autoStart: true

seeds:
  scenario: *seed
  simulation: *seed

export:
  - type: CSVExporter
    parameters:
      fileNameRoot: clustered_comm
      interval: 60
      exportPath: data
    data:
      - time

      - type: ReductionFactor
      - molecule: export-intra-cluster-relay-data-rate-not-leader # INTRA-CLUSTER
        aggregators: [ mean, variance, median ]
        value-filter: "onlyFinite"
      - molecule: leader-to-relay-data-rate # INTER-CLUSTER
        aggregators: [ mean, variance, median ]
        value-filter: "onlyFinite"
      - type: NumberOfClusters # Cluster Count: Number of occurrencies of the same value for "myLeader" molecule
      - type: ClusterSize # Cluster Size: Each node outputs the size of its cluster.
#        aggregators: [ mean, variance, median ]
#        value-filter: "onlyFinite"
      - type: ClustersOfOneElement # I'm counting the single occurrences of myLeader molecule ID value
    # - type: LossFactor # Loss factor (amount of information received by the leader / amount of info. transmitted)

      - molecule: export-intra-cluster-relay-data-rate # Single-element data-rate (==data-rate) => To compare w.r.t baselines
        aggregators: [ mean, variance, median ]
        value-filter: "onlyFinite"
      - molecule: export-baseline1-data-rate
        aggregators: [ mean, variance, median ]
        value-filter: "onlyFinite"
      - molecule: export-baseline2-data-rate
        aggregators: [ mean, variance, median ]
        value-filter: "onlyFinite"
      - molecule: export-baseline3-data-rate
        aggregators: [ mean, variance, median ]
        value-filter: "onlyFinite"

      - molecule: distanceToLeader
        aggregators: [ mean, variance, median ]
        value-filter: "onlyFinite"




